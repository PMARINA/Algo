import java.util.ArrayList;
import java.util.List;

public class KDTreeST<Value> {
	private static Node2LL node;

	public boolean isEmpty(){
		return node == null; 
	}

	public int size(){
		if(!isEmpty()){
			if(node.left == null && node.right == null)
				return 1;
			else if(node.left == null){
				return getLengthBranch(node.right) +1;
			}
			else if(node.right == null)
				return getLengthBranch(node.left)+1;
			return getLengthBranch(node.left) + getLengthBranch(node.right) + 1;
		}
		else return 0;
	}
	private getLengthBranch(Node2LL a){
		return getLengthBranch
	}

	public              void put(Point2D p, Value val)      // associate the value val with point p

	public             Value get(Point2D p)                 // value associated with point p 

	public           boolean contains(Point2D p)            // does the symbol table contain point p? 

	public Iterable<Point2D> points()                       // all points in the symbol table 

	public Iterable<Point2D> range(RectHV rect)             // all points that are inside the rectangle 

	public           Point2D nearest(Point2D p)             // a nearest neighbor to point p; null if the symbol table is empty 

	public static void main(String[] args)                  // unit testing of the methods (not graded) 
}